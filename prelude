#!/bin/bash

# Function to print usage information
print_usage() {
    echo >/dev/stderr "Usage: $0 [-P <relative_path>] [-F <output_filename>] [-g] [-c] [-M <match_pattern>] [--help] [--manual]"
    echo >/dev/stderr "  -P <relative_path>    Specify a relative path to include only files below that path"
    echo >/dev/stderr "  -F <output_filename>  Specify a filename to save the prompt"
    echo >/dev/stderr "  -M <match_pattern>    Specify pattern(s) to match filenames and only include those files. Use '|' as a delimiter for multiple patterns"
    echo >/dev/stderr "  -g                    Only include files tracked by git"
    echo >/dev/stderr "  -c                    Respect case sensitivity in pattern matching"
    echo >/dev/stderr "  --help                Display help information"
    echo >/dev/stderr "  --manual              Display the manual"
}

# Function to print manual
print_manual() {
    echo >/dev/stderr "MANUAL"
    echo >/dev/stderr "This script generates a prompt containing the file tree and concatenated file contents of a specified directory."
    echo >/dev/stderr "The prompt can be copied to the clipboard and optionally saved to a file."
    echo >/dev/stderr
    echo >/dev/stderr "OPTIONS"
    echo >/dev/stderr "  -P <relative_path>"
    echo >/dev/stderr "      Specify a relative path to include only files below that path."
    echo >/dev/stderr "      If not specified, the script will include all files in the current directory and its subdirectories."
    echo >/dev/stderr
    echo >/dev/stderr "  -F <output_filename>"
    echo >/dev/stderr "      Specify a filename to save the generated prompt."
    echo >/dev/stderr "      If not specified, the prompt will only be copied to the clipboard."
    echo >/dev/stderr
    echo >/dev/stderr "  -M <match_pattern>"
    echo >/dev/stderr "      Specify pattern(s) to match filenames. Uses tree's pattern matching syntax."
    echo >/dev/stderr "      For multiple patterns, separate them with '|'. Use '*' for wildcards."
    echo >/dev/stderr "      The matching is case-insensitive by default."
    echo >/dev/stderr
    echo >/dev/stderr "  -g"
    echo >/dev/stderr "      Only include files tracked by git. This option uses 'git ls-files' to determine"
    echo >/dev/stderr "      which files to include in the prompt."
    echo >/dev/stderr
    echo >/dev/stderr "  -c"
    echo >/dev/stderr "      Respect case sensitivity in pattern matching. By default, pattern matching is case-insensitive."
    echo >/dev/stderr
    echo >/dev/stderr "  --help"
    echo >/dev/stderr "      Display help information."
    echo >/dev/stderr
    echo >/dev/stderr "  --manual"
    echo >/dev/stderr "      Display the manual."
    echo >/dev/stderr
    echo >/dev/stderr "EXAMPLES"
    echo >/dev/stderr "  $0"
    echo >/dev/stderr "      Generate a prompt for all files in the current directory and copy it to the clipboard."
    echo >/dev/stderr
    echo >/dev/stderr "  $0 -P src"
    echo >/dev/stderr "      Generate a prompt for all files below the specified path and copy it to the clipboard."
    echo >/dev/stderr
    echo >/dev/stderr "  $0 -F prompt.txt"
    echo >/dev/stderr "      Generate a prompt for all files in the current directory and save it to a file."
    echo >/dev/stderr
    echo >/dev/stderr "  $0 -P src -f prompt.txt"
    echo >/dev/stderr "      Generate a prompt for all files below the specified path and save it to a file."
    echo >/dev/stderr
    echo >/dev/stderr "  $0 -M \"*.txt|*.py\""
    echo >/dev/stderr "      Generate a prompt for all .txt and .py files."
    echo >/dev/stderr
    echo >/dev/stderr "  $0 -M \"test*\""
    echo >/dev/stderr "      Generate a prompt for all files starting with 'test'."
    echo >/dev/stderr
}

# Initialize variables
specified_path=""
output_filename=""
tree_pattern=""
git_only=false
case_sensitive=false
exclude_patterns="prelude|.git|.preludeignore|.gitignore"

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to copy to clipboard
copy_to_clipboard() {
    local prompt="$1"
    if command_exists pbcopy; then
        echo -e "$prompt" | pbcopy
    elif command_exists xclip; then
        echo -e "$prompt" | xclip -selection clipboard
    elif command_exists xsel; then
        echo -e "$prompt" | xsel --clipboard --input
    elif command_exists clip; then
        echo -e "$prompt" | clip
    elif [ -z "$output_filename" ]; then
        echo -e "$prompt"
    fi
}

# Function to add patterns from a file to exclude_patterns
add_patterns_from_file() {
    local file="$1"
    if [ -f "$file" ]; then
        while IFS= read -r line || [[ -n "$line" ]]; do
            line=$(echo "$line" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
            if [[ ! "$line" =~ ^#.*$ ]] && [[ -n "$line" ]]; then
                # if line starts with /, remove it
                if [[ "$line" == /* ]]; then
                    line=${line:1}
                fi
                IFS='|' read -ra existing_patterns <<< "$exclude_patterns"
                if ! [[ " ${existing_patterns[*]} " =~ " ${line} " ]]; then
                    exclude_patterns=${exclude_patterns:+"$exclude_patterns|"}$line
                fi
            fi
        done < "$file"
    fi
}

filter_files() {
    local file="$1"
    local match=false

    if [ -n "$tree_pattern" ]; then
        IFS='|' read -ra patterns <<< "$tree_pattern"
        for pattern in "${patterns[@]}"; do
            if [ "$case_sensitive" = true ]; then
                [[ "$file" == $pattern ]] && match=true && break
            else
                shopt -s nocasematch
                [[ "$file" == $pattern ]] && match=true && break
                shopt -u nocasematch
            fi
        done
    else
        match=true
    fi
    
    if [ "$match" = true ] && ( [ -z "$exclude_patterns" ] || ! [[ $file =~ $exclude_patterns ]] ); then
        echo "$file"
    fi
}

# Function to validate a pattern
validate_pattern() {
    local pattern="$1"
    if [[ "$pattern" == *[\[\]]* ]]; then
        echo >/dev/stderr "Error: Invalid pattern. Square brackets are not supported." >&2
        exit 1
    fi
}

# Parse command line arguments
while getopts ":P:F:M:cgC-:" opt; do
    case ${opt} in
        P ) specified_path=$OPTARG ;;
        F ) output_filename=$OPTARG ;;
        M ) tree_pattern=$OPTARG ;;
        c ) case_sensitive=true ;;
        g ) git_only=true ;;
        - )
            case "${OPTARG}" in
                help) print_usage; exit 0 ;;
                manual) print_manual; exit 0 ;;
                *) echo >/dev/stderr "Invalid option: --$OPTARG" 1>&2; print_usage; exit 1 ;;
            esac ;;
        \? ) echo >/dev/stderr "Invalid option: $OPTARG" 1>&2; print_usage; exit 1 ;;
        : ) echo >/dev/stderr "Invalid option: $OPTARG requires an argument" 1>&2; print_usage; exit 1 ;;
    esac
done

# Check if the repository is a git repo if the git_only option is used
if $git_only && [ ! -d ".git" ]; then
    echo >/dev/stderr "Error: The specified path is not a git repository" 1>&2
    exit 1
fi

# Check if the specified path exists
specified_path=${specified_path:-.}
if [ ! -d "$specified_path" ]; then
    echo >/dev/stderr "Error: The specified path '$specified_path' does not exist or is not a directory."
    exit 1
fi
specified_path=$(realpath "$specified_path")

# Add patterns from .gitignore and .preludeignore
add_patterns_from_file ".gitignore"
add_patterns_from_file ".preludeignore"
exclude_patterns+="|prelude"

# Get the file tree
if [ "$git_only" = true ]; then
    all_files=$(git ls-files "$specified_path")
    filtered_files=$(echo "$all_files" | while read -r file; do filter_files "$file"; done)
    file_tree=$(echo "$filtered_files" | tree -fia $([ "$case_sensitive" = false ] && echo "--ignore-case") --fromfile)
else
    file_tree=$(tree -fia --matchdirs --prune $([ "$case_sensitive" = false ] && echo "--ignore-case") "$specified_path" ${exclude_patterns:+-I "\"$exclude_patterns\""} ${tree_pattern:+-P "$tree_pattern"})
fi

# Concatenate file contents
concatenated_files=""
while IFS= read -r line; do
    if [ -f "$line" ] && [[ "$(realpath "$line")" == "$specified_path"* ]]; then
        concatenated_files+="\n\n--- File: $line ---\n\n$(cat "$line")"
    fi
done <<< "$file_tree"

# Build the prompt
prompt_pretext="I want you to help me fix some issues with my code. I have attached the code and file structure."
prompt="$prompt_pretext\n\nFile Tree:\n$file_tree\n\nConcatenated Files:\n$concatenated_files"

# Copy the prompt to clipboard
copy_to_clipboard "$prompt"

# Print completion message
echo >/dev/stderr "Got prompt with file tree and concatenated file contents."
echo >/dev/stderr "Files included in the prompt are:"
echo >/dev/stderr "$file_tree"
echo >/dev/stderr "The prompt has been copied to the clipboard."

# Save the prompt to a file if specified
if [ -n "$output_filename" ]; then
    echo -e "$prompt" > "$output_filename"
    echo >/dev/stderr "The prompt has been saved to $output_filename."
fi